// Code generated by protoc-gen-go.
// source: grpcc2s/movie_c2s.proto
// DO NOT EDIT!

/*
Package moviesc2s is a generated protocol buffer package.

It is generated from these files:
	grpcc2s/movie_c2s.proto

It has these top-level messages:
	Movie
	Movies
	MovieSkey
*/
package moviesc2s

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Movie struct {
	Skey          string `protobuf:"bytes,1,opt,name=skey" json:"skey,omitempty"`
	Filename      string `protobuf:"bytes,2,opt,name=filename" json:"filename,omitempty"`
	Title         string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Playtime      string `protobuf:"bytes,4,opt,name=playtime" json:"playtime,omitempty"`
	Photodatetime string `protobuf:"bytes,5,opt,name=photodatetime" json:"photodatetime,omitempty"`
}

func (m *Movie) Reset()                    { *m = Movie{} }
func (m *Movie) String() string            { return proto.CompactTextString(m) }
func (*Movie) ProtoMessage()               {}
func (*Movie) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Movies struct {
	Movies []*Movie `protobuf:"bytes,1,rep,name=movies" json:"movies,omitempty"`
}

func (m *Movies) Reset()                    { *m = Movies{} }
func (m *Movies) String() string            { return proto.CompactTextString(m) }
func (*Movies) ProtoMessage()               {}
func (*Movies) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Movies) GetMovies() []*Movie {
	if m != nil {
		return m.Movies
	}
	return nil
}

type MovieSkey struct {
	Skey string `protobuf:"bytes,1,opt,name=skey" json:"skey,omitempty"`
}

func (m *MovieSkey) Reset()                    { *m = MovieSkey{} }
func (m *MovieSkey) String() string            { return proto.CompactTextString(m) }
func (*MovieSkey) ProtoMessage()               {}
func (*MovieSkey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Movie)(nil), "moviesc2s.Movie")
	proto.RegisterType((*Movies)(nil), "moviesc2s.Movies")
	proto.RegisterType((*MovieSkey)(nil), "moviesc2s.MovieSkey")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for MovieC2SService service

type MovieC2SServiceClient interface {
	GetMovie(ctx context.Context, in *MovieSkey, opts ...grpc.CallOption) (*Movie, error)
	GetMovies(ctx context.Context, in *Movie, opts ...grpc.CallOption) (*Movies, error)
}

type movieC2SServiceClient struct {
	cc *grpc.ClientConn
}

func NewMovieC2SServiceClient(cc *grpc.ClientConn) MovieC2SServiceClient {
	return &movieC2SServiceClient{cc}
}

func (c *movieC2SServiceClient) GetMovie(ctx context.Context, in *MovieSkey, opts ...grpc.CallOption) (*Movie, error) {
	out := new(Movie)
	err := grpc.Invoke(ctx, "/moviesc2s.MovieC2SService/GetMovie", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieC2SServiceClient) GetMovies(ctx context.Context, in *Movie, opts ...grpc.CallOption) (*Movies, error) {
	out := new(Movies)
	err := grpc.Invoke(ctx, "/moviesc2s.MovieC2SService/GetMovies", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MovieC2SService service

type MovieC2SServiceServer interface {
	GetMovie(context.Context, *MovieSkey) (*Movie, error)
	GetMovies(context.Context, *Movie) (*Movies, error)
}

func RegisterMovieC2SServiceServer(s *grpc.Server, srv MovieC2SServiceServer) {
	s.RegisterService(&_MovieC2SService_serviceDesc, srv)
}

func _MovieC2SService_GetMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieSkey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieC2SServiceServer).GetMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moviesc2s.MovieC2SService/GetMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieC2SServiceServer).GetMovie(ctx, req.(*MovieSkey))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieC2SService_GetMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Movie)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieC2SServiceServer).GetMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moviesc2s.MovieC2SService/GetMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieC2SServiceServer).GetMovies(ctx, req.(*Movie))
	}
	return interceptor(ctx, in, info, handler)
}

var _MovieC2SService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moviesc2s.MovieC2SService",
	HandlerType: (*MovieC2SServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMovie",
			Handler:    _MovieC2SService_GetMovie_Handler,
		},
		{
			MethodName: "GetMovies",
			Handler:    _MovieC2SService_GetMovies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("grpcc2s/movie_c2s.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x50, 0xcd, 0x4a, 0xc3, 0x40,
	0x10, 0x26, 0xb6, 0x09, 0xcd, 0x88, 0xa8, 0x43, 0xc1, 0x25, 0x17, 0x4b, 0xf0, 0x90, 0x53, 0x94,
	0xf1, 0x11, 0x3c, 0x78, 0xf2, 0xd2, 0x3c, 0x80, 0xc4, 0x75, 0xd4, 0xc5, 0xc4, 0x0d, 0x99, 0xa5,
	0xd2, 0xa7, 0xf0, 0x95, 0x25, 0x13, 0x5b, 0xb0, 0xe9, 0x6d, 0xbf, 0xbf, 0xd9, 0x6f, 0x06, 0xae,
	0xde, 0xfb, 0xce, 0x5a, 0x92, 0xdb, 0xd6, 0x6f, 0x1c, 0x3f, 0x5b, 0x92, 0xb2, 0xeb, 0x7d, 0xf0,
	0x98, 0x2a, 0x21, 0x96, 0x24, 0xff, 0x89, 0x20, 0x7e, 0x1a, 0x10, 0x22, 0xcc, 0xe5, 0x93, 0xb7,
	0x26, 0x5a, 0x45, 0x45, 0xba, 0xd6, 0x37, 0x66, 0xb0, 0x78, 0x73, 0x0d, 0x7f, 0xd5, 0x2d, 0x9b,
	0x13, 0xe5, 0xf7, 0x18, 0x97, 0x10, 0x07, 0x17, 0x1a, 0x36, 0x33, 0x15, 0x46, 0x30, 0x24, 0xba,
	0xa6, 0xde, 0x06, 0xd7, 0xb2, 0x99, 0x8f, 0x89, 0x1d, 0xc6, 0x1b, 0x38, 0xeb, 0x3e, 0x7c, 0xf0,
	0xaf, 0x75, 0x60, 0x35, 0xc4, 0x6a, 0xf8, 0x4f, 0xe6, 0x04, 0x89, 0x16, 0x12, 0x2c, 0x20, 0x19,
	0x8b, 0x9a, 0x68, 0x35, 0x2b, 0x4e, 0xe9, 0xa2, 0xdc, 0xf7, 0x2e, 0xd5, 0xb2, 0xfe, 0xd3, 0xf3,
	0x6b, 0x48, 0x95, 0xa8, 0x86, 0xd2, 0x47, 0x16, 0xa1, 0x6f, 0x38, 0x57, 0xc3, 0x03, 0x55, 0x15,
	0xf7, 0x1b, 0x67, 0x19, 0x09, 0x16, 0x8f, 0x1c, 0xc6, 0xdd, 0x97, 0x87, 0x93, 0x87, 0x41, 0xd9,
	0xe4, 0x3f, 0xbc, 0x83, 0x74, 0x97, 0x11, 0x9c, 0xc8, 0xd9, 0xe5, 0x21, 0x23, 0x2f, 0x89, 0x5e,
	0xfc, 0xfe, 0x37, 0x00, 0x00, 0xff, 0xff, 0x09, 0x5b, 0xcf, 0xb0, 0x8c, 0x01, 0x00, 0x00,
}
